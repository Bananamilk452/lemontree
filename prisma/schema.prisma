generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "typedSql"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model Diary {
  id         String      @id @default(uuid(7))
  content    String
  date       DateTime    @default(now())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime?   @updatedAt
  embeddings Embedding[]
  memories   Memory[]
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([date])
  @@map("diary")
}

model Embedding {
  id        String                      @id @default(uuid(7))
  vector    Unsupported("vector(768)")?
  content   String
  diaryId   String?
  diary     Diary?                      @relation(fields: [diaryId], references: [id], onDelete: Cascade)
  memoryId  String?
  memory    Memory?                     @relation(fields: [memoryId], references: [id], onDelete: Cascade)
  createdAt DateTime                    @default(now())
  updatedAt DateTime?                   @updatedAt

  @@index([diaryId])
  @@index([memoryId])
  @@index([vector], map: "embedding_vector_HNSW")
  @@map("embedding")
}

model Memory {
  id         String      @id @default(uuid(7))
  content    String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime?   @updatedAt
  embeddings Embedding[]
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  diary      Diary?      @relation(fields: [diaryId], references: [id], onDelete: Cascade)
  diaryId    String?

  @@index([userId])
  @@index([diaryId])
  @@map("memory")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  diaries       Diary[]
  memories      Memory[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
